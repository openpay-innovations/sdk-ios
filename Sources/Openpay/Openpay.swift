//
//  Openpay.swift
//  Openpay
//
//  Created by june chen on 9/2/21.
//  Copyright Â© 2021 Openpay. All rights reserved.
//

import Foundation
import UIKit

// MARK: - Modal Presentation

/// Present an Openpay Web Checkout View modally over the specified view controller and load the
/// checkout URL generated by the provided transaction token and handover URL.
/// - Parameters:
///   - viewController: The viewController on which `UIViewController.present` will be called.
///   The Openpay Checkout View Controller will be presented modally over this view controller
///   or the closest parent that is able to handle the presentation.
///   - transactionToken: The URL encoded token used to compose the checkout URL as a query parameter, generated via the /orders
///   endpoint on the Openpay backend. The token received from the backend is already URL encoded.
///   - handoverURL: The base URL used to compose the checkout URL,
///   generated via the /orders endpoint on the Openpay backend.
///   - animated: Pass true to animate the presentation; otherwise, pass false.
///   - completion: The block object to be executed when the checkout is completed.
public func presentWebCheckoutView(
    over viewController: UIViewController,
    transactionToken: String,
    handoverURL: URL,
    animated: Bool = true,
    completion: @escaping (_ result: WebCheckoutResult) -> Void
) {
    let checkoutVC = WebCheckoutViewController(
        transactionToken: transactionToken,
        handoverURL: handoverURL,
        completion: completion
    )
    viewController.present(checkoutVC, animated: animated, completion: nil)
}

// MARK: - Locale
public private(set) var locale: OpenpayLocale = .australia {
    didSet {
        for (id, observation) in observations {
            guard let observer = observation.observer else {
                observations.removeValue(forKey: id)
                continue
            }
            observer.localeDidChange(oldValue)
        }
    }
}

public func setLocale(_ locale: OpenpayLocale) {
    Openpay.locale = locale
}

// MARK: - Configuration Observation
struct Observation {
    weak var observer: OpenpayConfigObserver?
}

private var observations = [ObjectIdentifier: Observation]()

public func addObserver(_ observer: OpenpayConfigObserver) {
    let id = ObjectIdentifier(observer)
    observations[id] = Observation(observer: observer)
}

public func removeObserver(_ observer: OpenpayConfigObserver) {
    let id = ObjectIdentifier(observer)
    observations.removeValue(forKey: id)
}
